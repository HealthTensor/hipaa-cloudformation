AWSTemplateFormatVersion: '2010-09-09'

# This VPC stack should be created first before any other
# CloudFormation stacks, such as a bastion stack, database
# stack and application stack

Parameters:

  SSHFrom:
    Description: Limit SSH access to bastion hosts to a CIDR IP block
    Type: String
    MinLength: 9
    MaxLength: 18
    Default: 0.0.0.0/0

  ConfigTagParam:
    Description: Config tag to apply to resources
    Type: String
    MinLength: 0
    MaxLength: 255

  InstanceTenancy:
    Description: The default instance tenancy
    Type: String
    AllowedPattern: "default|dedicated"
    ConstraintDescription: "Allowed values: default or dedicated"

Mappings:

  # Maps CIDR blocks to VPC and various subnets
  CIDRMap:
    VPC:
      CIDR: 172.16.0.0/16
    Public1:
      CIDR: 172.16.0.0/24
    Public2:
      CIDR: 172.16.1.0/24
    PrivateMisc1:
      CIDR: 172.16.2.0/24
    PrivateMisc2:
      CIDR: 172.16.3.0/24
    PrivateWebServer1:
      CIDR: 172.16.4.0/24
    PrivateWebServer2:
      CIDR: 172.16.5.0/24
    PrivateWorker1:
      CIDR: 172.16.6.0/24
    PrivateWorker2:
      CIDR: 172.16.7.0/24
    PrivateCesium1:
      CIDR: 172.16.10.16/28
    PrivateCesium2:
      CIDR: 172.16.11.0/28

Resources:

  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !FindInMap [CIDRMap, VPC, CIDR]
      EnableDnsSupport: true
      EnableDnsHostnames: true
      InstanceTenancy: !Ref InstanceTenancy
      Tags:
        - Key: Name
          Value: !Ref "AWS::StackName"
        - Key: Role
          Value: vpc
        - Key: Config
          Value: !Ref ConfigTagParam

  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !FindInMap [CIDRMap, Public1, CIDR]
      AvailabilityZone: !Select [ 0, "Fn::GetAZs": !Ref "AWS::Region"]
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-PublicSubnet1"
        - Key: Role
          Value: PublicSubnet
        - Key: Config
          Value: !Ref ConfigTagParam

  PublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !FindInMap [CIDRMap, Public2, CIDR]
      AvailabilityZone: !Select [ 1, "Fn::GetAZs": !Ref "AWS::Region"]
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-PublicSubnet2"
        - Key: Role
          Value: PublicSubnet
        - Key: Config
          Value: !Ref ConfigTagParam

  PrivateMiscSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !FindInMap [CIDRMap, PrivateMisc1, CIDR]
      AvailabilityZone: !Select [ 0, "Fn::GetAZs": !Ref "AWS::Region"]
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-PrivateMiscSubnet1"
        - Key: Role
          Value: PrivateMiscSubnet
        - Key: Config
          Value: !Ref ConfigTagParam

  PrivateMiscSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !FindInMap [CIDRMap, PrivateMisc2, CIDR]
      AvailabilityZone: !Select [ 1, "Fn::GetAZs": !Ref "AWS::Region"]
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-PrivateMiscSubnet2"
        - Key: Role
          Value: PrivateMiscSubnet
        - Key: Config
          Value: !Ref ConfigTagParam

  PrivateWebServerSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !FindInMap [CIDRMap, PrivateWebServer1, CIDR]
      AvailabilityZone: !Select [ 0, "Fn::GetAZs": !Ref "AWS::Region"]
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-PrivateWebServerSubnet1"
        - Key: Role
          Value: PrivateWebServerSubnet
        - Key: Config
          Value: !Ref ConfigTagParam

  PrivateWebServerSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !FindInMap [CIDRMap, PrivateWebServer2, CIDR]
      AvailabilityZone: !Select [ 1, "Fn::GetAZs": !Ref "AWS::Region"]
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-PrivateWebServerSubnet2"
        - Key: Role
          Value: PrivateWebServerSubnet
        - Key: Config
          Value: !Ref ConfigTagParam

  PrivateWorkerSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !FindInMap [CIDRMap, PrivateWorker1, CIDR]
      AvailabilityZone: !Select [ 0, "Fn::GetAZs": !Ref "AWS::Region"]
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-PrivateWorkerSubnet1"
        - Key: Role
          Value: PrivateWorkerSubnet
        - Key: Config
          Value: !Ref ConfigTagParam

  PrivateWorkerSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !FindInMap [CIDRMap, PrivateWorker2, CIDR]
      AvailabilityZone: !Select [ 1, "Fn::GetAZs": !Ref "AWS::Region"]
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-PrivateWorkerSubnet2"
        - Key: Role
          Value: PrivateWorkerSubnet
        - Key: Config
          Value: !Ref ConfigTagParam

  PrivateCesiumSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !FindInMap [CIDRMap, PrivateCesium1, CIDR]
      AvailabilityZone: !Select [ 0, "Fn::GetAZs": !Ref "AWS::Region"]
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-PrivateCesiumSubnet1"
        - Key: Role
          Value: PrivateCesiumSubnet
        - Key: Config
          Value: !Ref ConfigTagParam

  PrivateCesiumSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !FindInMap [CIDRMap, PrivateCesium2, CIDR]
      AvailabilityZone: !Select [ 1, "Fn::GetAZs": !Ref "AWS::Region"]
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-PrivateCesiumSubnet2"
        - Key: Role
          Value: PrivateCesiumSubnet
        - Key: Config
          Value: !Ref ConfigTagParam

  InternetGateway:
    Type: AWS::EC2::InternetGateway

  VPCGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway

  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-public-igw"
        - Key: Config
          Value: !Ref ConfigTagParam

  PublicRoute:
    Type: AWS::EC2::Route
    DependsOn: VPCGatewayAttachment
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  PublicSubnetRouteTableAssociation1:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet1
      RouteTableId: !Ref PublicRouteTable

  PublicSubnetRouteTableAssociation2:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet2
      RouteTableId: !Ref PublicRouteTable

  PublicSubnetNetworkAclAssociation1:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties:
      SubnetId: !Ref PublicSubnet1
      NetworkAclId: !GetAtt VPC.DefaultNetworkAcl

  PublicSubnetNetworkAclAssociation2:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties:
      SubnetId: !Ref PublicSubnet2
      NetworkAclId: !GetAtt VPC.DefaultNetworkAcl
      
  ELBSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Enable HTTP ingress
      VpcId: !Ref VPC
      SecurityGroupIngress:
      - CidrIp: 0.0.0.0/0
        IpProtocol: tcp
        ToPort: 80
        FromPort: 80
      - CidrIp: 0.0.0.0/0
        IpProtocol: tcp
        ToPort: 443
        FromPort: 443
        
  ELBSecurityGroupToWebServerHTTPEgress:
    Type: AWS::EC2::SecurityGroupEgress  # prevent security group circular references
    Properties:
      GroupId: !Ref ELBSecurityGroup
      IpProtocol: tcp
      ToPort: 80
      FromPort: 80
      DestinationSecurityGroupId: !Ref AppSecurityGroup

  ELBSecurityGroupToAppHTTPSEgress:
    Type: AWS::EC2::SecurityGroupEgress  # prevent security group circular references
    Properties:
      GroupId: !Ref ELBSecurityGroup
      IpProtocol: tcp
      ToPort: 443
      FromPort: 443
      DestinationSecurityGroupId: !Ref AppSecurityGroup

  CesiumSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Access for Cesium VPN tunnel
      VpcId: !Ref VPC
      SecurityGroupIngress:
      - SourceSecurityGroupId: !Ref BastionSecurityGroup
        IpProtocol: tcp
        ToPort: 22
        FromPort: 22
      - CidrIp: 166.124.120.0/22
        IpProtocol: icmp
        FromPort: -1
        ToPort: -1
      SecurityGroupEgress:
      - CidrIp: 166.124.120.0/22
        IpProtocol: icmp
        FromPort: -1
        ToPort: -1
      - CidrIp: 166.124.120.0/22
        IpProtocol: tcp
        FromPort: 5567
        ToPort: 5571
      - CidrIp: 0.0.0.0/0
        IpProtocol: tcp
        FromPort: 80
        ToPort: 80
      - CidrIp: 0.0.0.0/0
        IpProtocol: tcp
        FromPort: 443
        ToPort: 443

  AppSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Enable access from ELB to app
      VpcId: !Ref VPC
      SecurityGroupIngress:
      - SourceSecurityGroupId: !Ref ELBSecurityGroup
        IpProtocol: tcp
        ToPort: 80
        FromPort: 80
      - SourceSecurityGroupId: !Ref ELBSecurityGroup
        IpProtocol: tcp
        ToPort: 443
        FromPort: 443
      - SourceSecurityGroupId: !Ref BastionSecurityGroup
        IpProtocol: tcp
        ToPort: 22
        FromPort: 22
      SecurityGroupEgress:
      - CidrIp: 0.0.0.0/0
        IpProtocol: tcp
        FromPort: 80
        ToPort: 80
      - CidrIp: 0.0.0.0/0
        IpProtocol: tcp
        FromPort: 443
        ToPort: 443
      - CidrIp: 0.0.0.0/0
        IpProtocol: icmp
        ToPort: -1
        FromPort: -1
      - CidrIp: 0.0.0.0/0
        IpProtocol: 58
        ToPort: -1
        FromPort: -1

  AppSecurityGroupFromELBHTTPIngress:
    Type: AWS::EC2::SecurityGroupIngress  # prevent security group circular references
    Properties:
      GroupId: !Ref AppSecurityGroup
      IpProtocol: tcp
      ToPort: 80
      FromPort: 80
      SourceSecurityGroupId: !Ref ELBSecurityGroup

  AppSecurityGroupFromELBHTTPSIngress:
    Type: AWS::EC2::SecurityGroupIngress  # prevent security group circular references
    Properties:
      GroupId: !Ref AppSecurityGroup
      IpProtocol: tcp
      ToPort: 443
      FromPort: 443
      SourceSecurityGroupId: !Ref ELBSecurityGroup

  AppSecurityGroupFromBastionIngress:
    Type: AWS::EC2::SecurityGroupIngress  # prevent security group circular references
    Properties:
      GroupId: !Ref AppSecurityGroup
      IpProtocol: tcp
      ToPort: 22
      FromPort: 22
      SourceSecurityGroupId: !Ref BastionSecurityGroup

  AppSecurityGroupToDbEgress:
    Type: AWS::EC2::SecurityGroupEgress  # prevent security group circular references
    Properties:
      GroupId: !Ref AppSecurityGroup
      IpProtocol: tcp
      ToPort: 5432
      FromPort: 5432
      SourceSecurityGroupId: !Ref DbSecurityGroup

  BastionSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Enable access to the bastion host
      VpcId: !Ref VPC
      SecurityGroupIngress:
      - CidrIp: !Ref SSHFrom
        IpProtocol: tcp
        ToPort: 22
        FromPort: 22
      SecurityGroupEgress:
      - CidrIp: 0.0.0.0/0
        IpProtocol: tcp
        ToPort: 80
        FromPort: 80

  BastionSecurityGroupToAppEgress:
    Type: AWS::EC2::SecurityGroupEgress  # prevent security group circular references
    Properties:
      GroupId: !Ref BastionSecurityGroup
      IpProtocol: tcp
      ToPort: 22
      FromPort: 22
      DestinationSecurityGroupId: !Ref AppSecurityGroup
      
  BastionSecurityGroupToDbEgress:
    Type: AWS::EC2::SecurityGroupEgress  # prevent security group circular references
    Properties:
      GroupId: !Ref BastionSecurityGroup
      IpProtocol: tcp
      ToPort: 5432
      FromPort: 3306
      DestinationSecurityGroupId: !Ref DbSecurityGroup

  BastionSecurityGroupToCesiumEgress:
    Type: AWS::EC2::SecurityGroupEgress  # prevent security group circular references
    Properties:
      GroupId: !Ref BastionSecurityGroup
      IpProtocol: tcp
      ToPort: 22
      FromPort: 22
      DestinationSecurityGroupId: !Ref CesiumSecurityGroup

  DbSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Enable access to the RDS DB
      VpcId: !Ref VPC
      SecurityGroupEgress:
      - CidrIp: 0.0.0.0/0
        IpProtocol: tcp
        ToPort: 3306
        FromPort: 3306
      - CidrIp: 0.0.0.0/0
        IpProtocol: tcp
        ToPort: 5432
        FromPort: 5432

  DbSecurityGroupFromBastionIngress:
    Type: AWS::EC2::SecurityGroupIngress  # prevent security group circular references
    Properties:
      GroupId: !Ref DbSecurityGroup
      IpProtocol: tcp
      ToPort: 5432
      FromPort: 3306
      SourceSecurityGroupId: !Ref BastionSecurityGroup

  DbSecurityGroupFromAppIngress:
    Type: AWS::EC2::SecurityGroupIngress  # prevent security group circular references
    Properties:
      GroupId: !Ref DbSecurityGroup
      IpProtocol: tcp
      ToPort: 5432
      FromPort: 3306
      SourceSecurityGroupId: !Ref AppSecurityGroup
      
  # NAT-related resources
  # 
  # NAT is used to allow instances in private subnets to communicate with AWS
  # services, and pull down code and updates.  
  
  NatGateway:
    DependsOn: VPCGatewayAttachment
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt NatEIP.AllocationId
      SubnetId: !Ref PublicSubnet1

  NatEIP:
    DependsOn: VPCGatewayAttachment
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc
      
  NatRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-private-nat"
        - Key: Role
          Value: NatRouteTable
        - Key: Config
          Value: !Ref ConfigTagParam

  NatRoute:
    Type: AWS::EC2::Route
    DependsOn: VPCGatewayAttachment
    Properties:
      RouteTableId: !Ref NatRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NatGateway

  PrivateMiscSubnetRouteTableAssociation1:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateMiscSubnet1
      RouteTableId: !Ref NatRouteTable

  PrivateMiscSubnetRouteTableAssociation2:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateMiscSubnet2
      RouteTableId: !Ref NatRouteTable

  PrivateWebServerSubnetRouteTableAssociation1:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateWebServerSubnet1
      RouteTableId: !Ref NatRouteTable

  PrivateWebServerSubnetRouteTableAssociation2:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateWebServerSubnet2
      RouteTableId: !Ref NatRouteTable

  PrivateWorkerSubnetRouteTableAssociation1:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateWorkerSubnet1
      RouteTableId: !Ref NatRouteTable

  PrivateWorkerSubnetRouteTableAssociation2:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateWorkerSubnet2
      RouteTableId: !Ref NatRouteTable

  CesiumRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-private-cesium-route"
        - Key: Role
          Value: CesiumRouteTable
        - Key: Config
          Value: !Ref ConfigTagParam

  CesiumNatRoute:
    Type: AWS::EC2::Route
    DependsOn: VPCGatewayAttachment
    Properties:
      RouteTableId: !Ref CesiumRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NatGateway

  PrivateCesiumSubnetRouteTableAssociation1:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateCesiumSubnet1
      RouteTableId: !Ref CesiumRouteTable

  PrivateCesiumSubnetRouteTableAssociation2:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateCesiumSubnet2
      RouteTableId: !Ref CesiumRouteTable

Outputs:

  ConfigTag:
    Description: Config tag
    Value: !Ref ConfigTagParam
    Export:
      Name: !Sub "${AWS::StackName}-ConfigTag"

  VPCId:
    Description: VPC ID
    Value: !Ref VPC
    Export:
      Name: !Sub "${AWS::StackName}-VpcID"

  PublicSubnet1:
    Description: Public subnet 1 ID
    Value: !Ref PublicSubnet1
    Export:
      Name: !Sub "${AWS::StackName}-PublicSubnet1ID"

  PublicSubnet2:
    Description: Public subnet 2 ID
    Value: !Ref PublicSubnet2
    Export:
      Name: !Sub "${AWS::StackName}-PublicSubnet2ID"

  PrivateMiscSubnet1:
    Description: Private misc subnet 1 ID
    Value: !Ref PrivateMiscSubnet1
    Export:
      Name: !Sub "${AWS::StackName}-PrivateMiscSubnet1ID"

  PrivateMiscSubnet2:
    Description: Private misc subnet 2 ID
    Value: !Ref PrivateMiscSubnet2
    Export:
      Name: !Sub "${AWS::StackName}-PrivateMiscSubnet2ID"

  PrivateWebServerSubnet1:
    Description: Private webserver subnet 1 ID
    Value: !Ref PrivateWebServerSubnet1
    Export:
      Name: !Sub "${AWS::StackName}-PrivateWebServerSubnet1ID"

  PrivateWebServerSubnet2:
    Description: Private webserver subnet 2 ID
    Value: !Ref PrivateWebServerSubnet2
    Export:
      Name: !Sub "${AWS::StackName}-PrivateWebServerSubnet2ID"

  PrivateWorkerSubnet1:
    Description: Private worker subnet 1 ID
    Value: !Ref PrivateWorkerSubnet1
    Export:
      Name: !Sub "${AWS::StackName}-PrivateWorkerSubnet1ID"

  PrivateWorkerSubnet2:
    Description: Private worker subnet 2 ID
    Value: !Ref PrivateWorkerSubnet2
    Export:
      Name: !Sub "${AWS::StackName}-PrivateWorkerSubnet2ID"

  PrivateCesiumSubnet1:
    Description: Private Cesium subnet 1 ID
    Value: !Ref PrivateCesiumSubnet1
    Export:
      Name: !Sub "${AWS::StackName}-PrivateCesiumSubnet1ID"

  PrivateCesiumSubnet2:
    Description: Private Cesium subnet 2 ID
    Value: !Ref PrivateCesiumSubnet2
    Export:
      Name: !Sub "${AWS::StackName}-PrivateCesiumSubnet2ID"

  ELBSecurityGroup:
    Description: Security group ID for Internet-facing ELB
    Value: !GetAtt ELBSecurityGroup.GroupId
    Export:
      Name: !Sub "${AWS::StackName}-ELBSecurityGroupID"

  AppSecurityGroup:
    Description: Security group ID for app behind ELB
    Value: !GetAtt AppSecurityGroup.GroupId
    Export:
      Name: !Sub "${AWS::StackName}-AppSecurityGroupID"

  CesiumSecurityGroup:
    Description: Security group ID for Cesium tunneler
    Value: !GetAtt CesiumSecurityGroup.GroupId
    Export:
      Name: !Sub "${AWS::StackName}-CesiumSecurityGroupID"

  BastionSecurityGroup:
    Description: Security group ID for bastion host
    Value: !GetAtt BastionSecurityGroup.GroupId
    Export:
      Name: !Sub "${AWS::StackName}-BastionGroupID"

  DatabaseSecurityGroup:
    Description: Security group ID for RDS database
    Value: !GetAtt DbSecurityGroup.GroupId
    Export:
      Name: !Sub "${AWS::StackName}-DatabaseGroupID"
